{"version":3,"sources":["components/ExperimentPerformances/ExperimentPerformances.module.scss","App.module.scss","api.service.ts","components/ExperimentPerformances/ExperimentPerformances.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","baseUrl","getExperimentMidiFiles","expId","a","axios","get","rep","error","data","ExperimentPerformances","useState","setExpId","loading","setLoading","requestedFiles","setRequestedFiles","showError","setShowError","midiFiles","setMidiFiles","onButtonClick","className","styles","Typography","variant","TextField","input","label","value","onChange","e","target","Button","button","onClick","color","progress","CircularProgress","progressBar","map","file","midiSrc","visualizerId","midiItem","src","sound-font","visualizer","fileList","App","numExperiments","setNumExperiments","container","buttons","performances","exps","i","push","experiments","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a7625c5a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ExperimentPerformances\":\"ExperimentPerformances_ExperimentPerformances__1jBTp\",\"input\":\"ExperimentPerformances_input__2FBWC\",\"button\":\"ExperimentPerformances_button__1oleA\",\"midiItem\":\"ExperimentPerformances_midiItem__3CN8D\",\"progress\":\"ExperimentPerformances_progress__3tTb2\",\"progressBar\":\"ExperimentPerformances_progressBar__2M0Wn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__15LM-\",\"container\":\"App_container__eSJ6i\",\"buttons\":\"App_buttons__1l0RY\",\"performances\":\"App_performances__3Q4rY\"};","import axios from 'axios';\n\nexport const baseUrl = 'http://localhost:5000';\n\ntype Response = {\n    error: boolean,\n    data: any\n}\n\n\nexport const getExperimentMidiFiles = async (expId:string): Promise<Response> => {\n    try {\n        const rep = await axios.get<Array<string>>(`${baseUrl}/experiments/${expId}`)\n        return {\n            error: false,\n            data: rep.data\n        };\n    }\n    catch (err) {\n        return {\n            error: true,\n            data: null\n        }\n    }\n\n}","import React, { useState } from 'react';\n\nimport 'html-midi-player';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography'\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport styles from './ExperimentPerformances.module.scss'\nimport { Button } from '@material-ui/core';\nimport { baseUrl, getExperimentMidiFiles } from '../../api.service';\n\n\nconst ExperimentPerformances:React.FC = () => {\n  const [expId, setExpId] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [requestedFiles, setRequestedFiles] = useState(false);\n  const [showError, setShowError] = useState(false); \n  const [midiFiles, setMidiFiles] = useState<Array<string>>([]);\n  const onExpIdChange = (e:React.ChangeEvent<HTMLInputElement>) => {\n    setExpId(e.target.value)\n  }\n\n  const onButtonClick = async () => {\n    setLoading(true)\n    setShowError(false);\n    const rep = await getExperimentMidiFiles(expId);\n    if (rep.error) {\n      setShowError(true);\n    }\n    else {\n      setMidiFiles(rep.data);\n    }\n    setLoading(false)\n    setRequestedFiles(true);\n  }\n\n  const midiFileList = () => {\n    return midiFiles.map((file) => {\n      const midiSrc = `${baseUrl}/experiments/${expId}/${file}`;\n      const visualizerId = `${file}_visualizer`\n      return (\n        <div className={styles.midiItem}>\n          <Typography variant='body1'>\n            {file}\n          </Typography>\n          {/* @ts-ignore */}\n          <midi-player src={midiSrc} sound-font=\"https://storage.googleapis.com/magentadata/js/soundfonts/salamander\" visualizer={`#${visualizerId}`}></midi-player>\n          {/* @ts-ignore */}\n          {/* <midi-visualizer src={midiSrc} type=\"piano-roll\" id={visualizerId}></midi-visualizer> */}\n        </div>\n      )\n    })\n  }\n\n  return (\n    <div className={styles.ExperimentPerformances}>\n      <Typography variant=\"h6\">\n        Enter the id of the Neptune Experiment. It may take a while to download the performances. \n      </Typography>\n      <TextField className={styles.input} label=\"Experiment ID\" variant=\"outlined\" value={expId} onChange={onExpIdChange}></TextField>\n      <Button className={styles.button} variant=\"contained\" onClick={onButtonClick}>\n        Get Experiment Performances\n      </Button>\n\n      {showError && \n        <Typography variant=\"body1\" color=\"error\">\n          There was an error getting the midi files\n        </Typography>\n      }\n      {loading && \n        <div className={styles.progress}>\n          <CircularProgress className={styles.progressBar}/>\n        </div>\n      }\n\n      {!loading && requestedFiles &&\n        midiFileList()\n      }\n\n      <div className={styles.fileList}>\n\n      </div>\n    </div>\n  );\n}\n\nexport default ExperimentPerformances;\n","import React, { useState }  from 'react';\n\nimport 'html-midi-player';\nimport styles from './App.module.scss'\nimport { Button, Typography } from '@material-ui/core';\nimport ExperimentPerformances from './components/ExperimentPerformances/ExperimentPerformances';\n\n\nfunction App() {\n  const [numExperiments, setNumExperiments] = useState(1);\n\n  const experiments = () => {\n    const exps = []\n    for (let i = 0; i < numExperiments; i++) {\n      exps.push(<ExperimentPerformances />)\n    }\n    return exps\n  }\n\n  const addExperiment = () => {\n    setNumExperiments(numExperiments + 1);\n  }\n\n  const removeExperiment = () => {\n    if (numExperiments > 0)\n      setNumExperiments(numExperiments - 1);\n  }\n\n  return (\n    <div className={styles.App}>\n      <div className={styles.container}>\n        <Typography variant=\"h4\">\n          Click the buttons below to add or remove an experiment\n        </Typography>\n        <div className={styles.buttons}>\n          <Button variant='contained' onClick={addExperiment} color=\"primary\">\n            Add Experiment\n          </Button>\n          <Button variant='contained' onClick={removeExperiment} color=\"primary\">\n            Remove Experiment\n          </Button>\n        </div>\n        <div className={styles.performances}>\n          {experiments()}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}